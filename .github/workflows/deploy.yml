name: Build and deploy
on:
  workflow_run:
    workflows: [Test and build]
    types:
      - completed
    branches:
      - master
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: false
        default: 'info' 
        type: choice
        options:
        - info
        - warning
        - debug
env:
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_HOST: ${{ secrets.SSH_HOST }}
  APP_NAME: url_shortener
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  REGISTRY_USER: ${{ github.actor }}
jobs:
  build-amd64-and-upload:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          # Can't use self-defined environment variables for some reason
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_BUILD_PUSH_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          push: true
          target: release
          tags: ghcr.io/${{ github.repository_owner }}/url_shortener:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/url_shortener:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/url_shortener:buildcache,mode=max
          platforms: linux/amd64
  build-arm64-and-upload:
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          # Can't use self-defined environment variables for some reason
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_BUILD_PUSH_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          push: true
          target: release
          tags: ghcr.io/${{ github.repository_owner }}/url_shortener:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/url_shortener:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/url_shortener:buildcache,mode=max
          platforms: linux/arm64
  health_check:
    runs-on: ubuntu-latest
    needs: [build-amd64-and-upload, build-arm64-and-upload]
    steps:
      - name: Check whether URL shortener is up
        id: health_check
        run: |
          curl $SSH_HOST/healthz
  notify_unsuccessful_health_check:
    runs-on: ubuntu-latest
    needs: [health_check]
    if: ${{ failure() }}
    steps:
      - name: Send slack notification
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          now=$(date +%Y-%m-%dT%H:%M:%S)
          payload=$(echo "{\"text\":\"URL shortener backend: Health check for $SSH_HOST/healthz failed at <DATE>. Workflow: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"}" | sed "s~<DATE>~$now~")
          curl -X POST -H 'Content-type: application/json' --data "$payload" $SLACK_WEBHOOK
          exit 1
  deploy:
    runs-on: ubuntu-latest
    needs: [health_check]
    steps:
      - uses: actions/checkout@v3        
      - name: Configure SSH
        id: ssh
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/url_shortener_rsa
          chmod 600 ~/.ssh/url_shortener_rsa
          SSH_HOST_IP=$(nslookup $SSH_HOST | tail -n 2 | head -n 1 | cut -d ' ' -f 2)
          echo "host name: $SSH_HOST, host ip address: $SSH_HOST_IP"
          cat << EOF >> ~/.ssh/config
          Host production
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/url_shortener_rsa
            StrictHostKeyChecking no
          EOF
      - name: SSH into server, pull image, run container
        id: deploy
        env:
          NODE_ENV: production
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}
          URL_REDIRECT_DOMAIN: ${{ secrets.URL_REDIRECT_DOMAIN }}
          DOCKER_PULL_PASSWORD: ${{ secrets.DOCKER_PULL_TOKEN }}
        run: |
          ssh production << EOF
          echo "Logging into container registry"
          echo $DOCKER_PULL_PASSWORD | docker login ghcr.io -u $REGISTRY_USER --password-stdin

          echo "Pulling image"
          docker pull "$IMAGE_REGISTRY/$APP_NAME:$GITHUB_SHA"

          echo "Stopping existing container"
          docker stop $APP_NAME && docker rm $APP_NAME

          echo "Starting new container"
          docker run --name $APP_NAME -p 3000:3000 --network host -m 200m --cpus="0.5" -e NODE_ENV=$NODE_ENV -e POSTGRES_HOST=$POSTGRES_HOST \
          -e POSTGRES_USER=$POSTGRES_USER -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD -e POSTGRES_DB=$POSTGRES_DB \
          -e REDIS_URL=$REDIS_URL -e URL_REDIRECT_DOMAIN=$URL_REDIRECT_DOMAIN -e ALLOWED_ORIGINS=$ALLOWED_ORIGINS \
          -d "$IMAGE_REGISTRY/$APP_NAME:$GITHUB_SHA"

          sleep 3
          docker ps

          docker image prune -fa
          EOF
      - name: Delete old github package versions
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'url_shortener'
          package-type: 'container'
          min-versions-to-keep: 50
          token: ${{ secrets.DELETE_OLD_PACKAGE_TOKEN }}
  notify_unsuccessful:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: ${{ failure() }}
    steps:
      - name: Send slack notification unsuccessful run    
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          now=$(date +%Y-%m-%dT%H:%M:%S)
          payload=$(echo "{\"text\":\"URL shortener backend: Deployment failed at <DATE>. Workflow: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"}" | sed "s~<DATE>~$now~")
          curl -X POST -H 'Content-type: application/json' --data "$payload" $SLACK_WEBHOOK
  notify_successful:
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: Send slack notification successful run
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          now=$(date +%Y-%m-%dT%H:%M:%S)
          payload=$(echo "{\"text\":\"URL shortener backend: Deployment succeeded at <DATE>. Workflow: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"}" | sed "s~<DATE>~$now~")
          curl -X POST -H 'Content-type: application/json' --data "$payload" $SLACK_WEBHOOK

      